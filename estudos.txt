Agora, ao invés de termos que fazer todas as instalações manualmente como foi feito no explorer 2.0, aqui nós nos 
vamos simplesmente usar uma biblioteca chamada create-react-app, é uma biblioteca onde temos todas as dependências
que é preciso: react, typescript, webpack e babel. Com isso não precisamos nos preoculpar com as dependêcias,
nos preocupamos somente com o código em si. 
Bem, usamos o comando : yarn create react-app nome da pasta --template typescript 
Uma vez feito isso, vai se instalar todas as dependências. Vamos poder fazer uma limpa nos arquivos:
Iremos deixar na pasta dist: App.tsx, index.tsx e react-app-env.d.ts
Na pasta publique deixaremos somente o inde.htmlparser
Lá no nosso arquivo package.json, na parte de "dependencies": vamos pegar todos as @testing, @types e o typescript
Vamos criar uma parte devDependencies e colocaremos essas dependências como desenvolvimento. 

--> Trabalhando com styled-components: Sempre que vamos trabalhar com css, normalmente, criamos um arquivo .css e lá 
fazemos nossas estilizações, só que temos uma dificuldade aí, quando temos um projeto muito grande, mas bem grande 
ou até mesmo muito antigo, muitas das vezes fica inviável identificar qual tag css é, ou para que cervo ou onde ela
está. E mesmo criando com Sass, onde podemos dividir nossa aplicação em diversas partes, ainda vi chegar um momento 
onde vamos ter muitas nomenclaturas e não vamos conseguir identificar onde e para que serve tal coisa. E é aqui que o 
styled-components entra, com ele nós conseguimos criar algo específico para aquele ponto, um título por exemplo, se 
usarmos um title na aplicação comum, pode chegar um ponto onde esse  title vai dar conflito, vi sobressair uma oltra 
tag e vai dar dor de cabeça, com styled-components não temos esse problemas, porque ele é criado especificamente para
um arquivo em especifico, pra uma tag específica, e ele vai gerar de forma aleatória uma tag css, para que não aja
conflitos: 
import styled from 'styled-components'
const Title = styled.h1`                        Perceba que ao invés de nomearmos uma class, colocamos o nome da 
  font-size: 50px;                              const. Isso porque é uma coisa única, que não se repete e não da 
  color: #8257e6;                               conflito.
`
export function App() {
  return (
    <div className="App">
      <Title>Hello World!</Title>
    </div>
  );
}

---> filter, esse que é um rackzinho bem bacana aqui no css, porque ao invés de criarmos novas tags para criar uma 
funcionalidade manualmente, ele já nos oferece diversas funcionalidades, como essa de exemplo brightness, ela pega a cor
de fundo onde está o botão e faz com que ela escureça até certo nível, quando passamos o mouse por cima, ao invés 
procurarmos uma cor específica e colocar essa cor, ele faz isso por nós.
&:hover{
  filter: brightness(0.9);
}
 
---> REM, o rem é uma "unidade de medida" como o por exemplo. Por padrão a web usa 16px no desktop, 
1rem = 16px, então quando usamos 2rem, estamos usando 32px, é só multiplicar a quantidade de rem por 16px.

---> função que começa com 'handle'. Não é uma regra, mas é um padrão que se costuma usar.
Quando temos uma função que será acionada a partir do usuaria (por exemplo, quando se aperta
um botão) costumamos usar handle no início da função:
function handleCreateNewTransaction(){}


---> Contesto: Compartilhamento de estado em diferentes sistemas da aplicação, independente de onde 
esses sistemas estejam. Eu consigo acessar uma mesma informação de varios de varios componentes da 
minha aplacação, independente de onde eles estejam, independente do nivel que eles estejam, o nivel
hierarquico que eles estejam na nossa aplicação.
